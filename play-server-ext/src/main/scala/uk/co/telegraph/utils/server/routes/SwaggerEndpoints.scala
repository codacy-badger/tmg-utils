package uk.co.telegraph.utils.server.routes

import java.io.File
import javax.inject.Inject

import io.swagger.annotations.ApiOperation
import play.api.Configuration
import play.api.http.MimeTypes
import play.api.mvc._

import scala.io.Source

/**
  * Endpoint that expose the swagger definition kept as a resource.
  * Useful in the cases that the swagger file is provided instead of autogenerated.
  * @param controllerComponents
  * @param config
  */
class SwaggerEndpoints @Inject()
(
  controllerComponents: ControllerComponents,
  config: Configuration
) extends AbstractController(controllerComponents) {
  import SwaggerEndpoints._

  private[routes] val swaggerResponse = swaggerFileFound match {
    case Some(swaggerFile) => Ok(Source.fromFile(swaggerFile).getLines.mkString("\n")).as(getMimeType(swaggerFile))
    case _ => NotFound("No swagger file was found")
  }

  @ApiOperation(value = "Endpoint exposing swagger file")
  def getSwaggerDefinition = Action { _ => swaggerResponse }
}

object SwaggerEndpoints {
  trait SupportedType { val extension: String; val mimeType: String }
  case object Json extends SupportedType { val extension = "json"; val mimeType = MimeTypes.JSON }
  case object XML extends SupportedType { val extension = "xml"; val mimeType = MimeTypes.XML }
  case object Yaml extends SupportedType { val extension = "yaml"; val mimeType = "text/x-yaml" }
  case object Yml extends SupportedType { val extension = "yml"; val mimeType = "text/x-yaml" }


  private[routes] val resourceFolder = new File(getClass.getResource("/").getPath)
  private[routes] def getAllFiles(acc: Seq[File], current: File): Seq[File] = {
    if(!current.isDirectory) {
      acc :+ current
    } else {
      acc ++ current.listFiles.foldLeft(Seq[File]())(getAllFiles)
    }
  }
  private[routes] final val SwaggerFileName = "swagger"
  private[routes] val swaggerRegex =
    s"$SwaggerFileName\\.(${Json.extension}|${Yaml.extension}|${Yml.extension}|${XML.extension})"
  private[routes] def getFile() = resourceFolder
    .listFiles
    .foldLeft(Seq[File]())(getAllFiles)
    .find(_.getName.toLowerCase.matches(swaggerRegex))
  private[routes] val swaggerFileFound = getFile()
  private[routes] def getMimeType(file: File): String = {
    val fileType = file.getName.split('.').last
    fileType match {
      case Json.extension => Json.mimeType
      case Yaml.extension | Yml.extension => Yaml.mimeType
      case XML.extension => XML.mimeType
    }
  }
}
